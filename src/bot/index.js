import TelegramBot from 'node-telegram-bot-api';

// Telegram bot configuration
const token = '7435351031:AAHwFywxl4j9Ou5aJcndg6OBuvzBJisymfY';
const adminUsername = 'valerianychexe';
let adminChatId = '';

const bot = new TelegramBot(token, { polling: true });

const categories = {
  HARDWARE_REPLACEMENT: 'üñ± –ó–∞–º–µ–Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
  SOFTWARE_INSTALLATION: 'üíø –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ü–û',
  TECHNICAL_SUPPORT: 'üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
  REPAIR: 'üõ† –†–µ–º–æ–Ω—Ç'
};

// Store user states
const userStates = new Map();

// Store requests
const requests = new Map();

// Store notification users
const notificationUsers = new Map();

// Helper function to notify all admins
async function notifyAdmins(message, keyboard = {}) {
  const admins = [adminChatId, ...Array.from(notificationUsers.values())
    .filter(user => user.isAdmin)
    .map(user => user.chatId)];

  for (const chatId of admins) {
    if (chatId) {
      try {
        await bot.sendMessage(chatId, message, keyboard ? { reply_markup: keyboard } : {});
      } catch (error) {
        console.error(`Failed to notify admin ${chatId}:`, error.message);
      }
    }
  }
}

// Set admin chat ID when they interact with the bot
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  
  // If this is the admin's first message, store their chat ID
  if (msg.from.username === adminUsername && !adminChatId) {
    adminChatId = chatId.toString();
    await bot.sendMessage(chatId, '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!');
  }

  const keyboard = {
    keyboard: [
      [{ text: categories.HARDWARE_REPLACEMENT }],
      [{ text: categories.SOFTWARE_INSTALLATION }],
      [{ text: categories.TECHNICAL_SUPPORT }],
      [{ text: categories.REPAIR }]
    ],
    resize_keyboard: true,
    one_time_keyboard: true
  };

  bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–∫–∏:', { reply_markup: keyboard });
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const userId = msg.from.id;
  
  // Skip command messages
  if (text?.startsWith('/')) return;

  const userState = userStates.get(userId) || {};

  // Handle category selection
  if (Object.values(categories).includes(text)) {
    userState.category = Object.keys(categories).find(key => categories[key] === text);
    userState.stage = 'DESCRIPTION';
    userStates.set(userId, userState);
    
    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:');
    return;
  }

  // Handle description
  if (userState.stage === 'DESCRIPTION') {
    const category = userState.category;
    const description = text;
    
    // Create new request
    const requestId = Date.now().toString();
    const request = {
      id: requestId,
      userId: userId,
      username: msg.from.username || msg.from.first_name,
      category,
      description,
      status: 'PENDING',
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    requests.set(requestId, request);
    
    // Send to admin
    const adminMessage = `
üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${requestId}
üë§ –û—Ç: @${request.username}
üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categories[category]}
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${description}
‚è∞ –í—Ä–µ–º—è: ${request.createdAt.toLocaleString('ru-RU')}
    `;
    
    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: `accept_${requestId}` },
          { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${requestId}` }
        ]
      ]
    };
    
    // Notify all admins
    await notifyAdmins(adminMessage, keyboard);
    
    // Confirm to user
    bot.sendMessage(chatId, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
    
    // Clear user state
    userStates.delete(userId);
  }
});

// Handle admin actions
bot.on('callback_query', async (query) => {
  const [action, requestId] = query.data.split('_');
  const request = requests.get(requestId);
  
  if (!request) return;

  // Check if the user is an admin
  const isAdmin = query.from.username === adminUsername || 
    notificationUsers.get(query.from.username)?.isAdmin;

  if (!isAdmin) {
    bot.answerCallbackQuery(query.id, { text: '‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è' });
    return;
  }

  if (action === 'accept') {
    request.status = 'IN_PROGRESS';
    request.updatedAt = new Date();
    requests.set(requestId, request);
    
    // Notify user
    bot.sendMessage(request.userId, `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #${requestId} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`);
    
    // Update admin message
    const updatedMessage = `
‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É
üìù –ó–∞—è–≤–∫–∞ #${requestId}
üë§ –û—Ç: @${request.username}
üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categories[request.category]}
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${request.description}
‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${request.updatedAt.toLocaleString('ru-RU')}
    `;
    
    await notifyAdmins(updatedMessage);
    
  } else if (action === 'reject') {
    request.status = 'REJECTED';
    request.updatedAt = new Date();
    requests.set(requestId, request);
    
    // Notify user
    bot.sendMessage(request.userId, `‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ #${requestId} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º.`);
    
    // Update admin message
    const updatedMessage = `
‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞
üìù –ó–∞—è–≤–∫–∞ #${requestId}
üë§ –û—Ç: @${request.username}
üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categories[request.category]}
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${request.description}
‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${request.updatedAt.toLocaleString('ru-RU')}
    `;
    
    await notifyAdmins(updatedMessage);
  }
  
  bot.answerCallbackQuery(query.id);
});

// Command to add notification user
bot.onText(/\/adduser (.+)/, async (msg, match) => {
  if (msg.from.username !== adminUsername) {
    bot.sendMessage(msg.chat.id, '‚ö†Ô∏è –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    return;
  }

  const [username, chatId] = match[1].split(' ');
  if (!username || !chatId) {
    bot.sendMessage(msg.chat.id, '‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /adduser username chatId');
    return;
  }

  notificationUsers.set(username, {
    username,
    chatId,
    isAdmin: true
  });

  bot.sendMessage(msg.chat.id, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...');